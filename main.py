"""
Main entry point cho b√†n ph√≠m recommend ti·∫øng Vi·ªát
"""

import sys
import os
from core import TextProcessor, Dictionary, Recommender


def test_phase_1():
    """
    Test Phase 1: Core functionality
    """
    print("=" * 60)
    print("PHASE 1 TEST - CORE FUNCTIONALITY")
    print("=" * 60)
    
    # Test TextProcessor
    print("\n1. Testing TextProcessor...")
    processor = TextProcessor()
    
    test_texts = [
        "xin ch√†o m·ªçi ng∆∞·ªùi",
        "t√¥i h·ªçc ti·∫øng vi·ªát",
        "h√¥m nay tr·ªùi ƒë·∫πp"
    ]
    
    for text in test_texts:
        print(f"\nText: '{text}'")
        print(f"  No accents: {processor.remove_accents(text)}")
        print(f"  Tokenized: {processor.tokenize(text)}")
    
    # Test Dictionary
    print("\n\n2. Testing Dictionary...")
    dictionary = Dictionary()
    print(f"Dictionary stats: {dictionary.get_stats()}")
    
    test_queries = ["xin", "chao", "xinchao", "moinguoi"]
    for query in test_queries:
        print(f"\nQuery: '{query}'")
        results = dictionary.search_comprehensive(query, max_results=3)
        for result, confidence, match_type in results:
            print(f"  {result} (confidence: {confidence:.2f}, type: {match_type})")
    
    # Test Recommender
    print("\n\n3. Testing Recommender...")
    recommender = Recommender()
    
    test_inputs = [
        "xinchao",
        "xinchaomoinguoi", 
        "toihoc",
        "chucmung"
    ]
    
    for test_input in test_inputs:
        print(f"\nInput: '{test_input}'")
        recommendations = recommender.recommend_smart(test_input, max_suggestions=3)
        for i, (text, confidence, rec_type) in enumerate(recommendations, 1):
            print(f"  {i}. {text} (confidence: {confidence:.3f}, type: {rec_type})")


def interactive_demo():
    """
    Demo t∆∞∆°ng t√°c v·ªõi user
    """
    print("\n" + "=" * 60)
    print("INTERACTIVE DEMO")
    print("=" * 60)
    print("Nh·∫≠p text kh√¥ng d·∫•u ƒë·ªÉ xem g·ª£i √Ω (nh·∫≠p 'quit' ƒë·ªÉ tho√°t)")
    print("V√≠ d·ª•: xinchao, toihoc, moinguoi, etc.")
    
    recommender = Recommender()
    context = []
    
    while True:
        try:
            user_input = input("\nüìù Nh·∫≠p: ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'q']:
                print("T·∫°m bi·ªát! üëã")
                break
            
            if not user_input:
                continue
            
            # L·∫•y g·ª£i √Ω
            recommendations = recommender.recommend_smart(user_input, context, max_suggestions=5)
            
            if recommendations:
                print("üí° G·ª£i √Ω:")
                for i, (text, confidence, rec_type) in enumerate(recommendations, 1):
                    confidence_bar = "‚ñà" * int(confidence * 10)
                    print(f"  {i}. {text} [{confidence_bar:10}] ({confidence:.2f})")
                
                # Cho user ch·ªçn
                try:
                    choice = input("\nüîò Ch·ªçn s·ªë (ho·∫∑c Enter ƒë·ªÉ b·ªè qua): ").strip()
                    if choice.isdigit():
                        choice_idx = int(choice) - 1
                        if 0 <= choice_idx < len(recommendations):
                            chosen_text = recommendations[choice_idx][0]
                            print(f"‚úÖ B·∫°n ch·ªçn: '{chosen_text}'")
                            
                            # C·∫≠p nh·∫≠t context v√† learning
                            context.extend(chosen_text.split())
                            recommender.update_user_choice(chosen_text, context)
                            
                            # Gi·ªõi h·∫°n context length
                            if len(context) > 10:
                                context = context[-10:]
                except ValueError:
                    pass
            else:
                print("‚ùå Kh√¥ng t√¨m th·∫•y g·ª£i √Ω ph√π h·ª£p")
                
        except KeyboardInterrupt:
            print("\n\nT·∫°m bi·ªát! üëã")
            break
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")


def run_ui():
    """
    Ch·∫°y giao di·ªán ƒë·ªì h·ªça
    """
    try:
        from ui import KeyboardUI
        print("üöÄ Kh·ªüi ƒë·ªông giao di·ªán ƒë·ªì h·ªça...")
        app = KeyboardUI()
        app.run()
    except ImportError as e:
        print(f"‚ùå L·ªói import UI: {e}")
        print("H√£y ch·∫Øc ch·∫Øn r·∫±ng tkinter ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
    except Exception as e:
        print(f"‚ùå L·ªói UI: {e}")


def main():
    """
    Main function
    """
    print("üöÄ B√ÄN PH√çM RECOMMEND TI·∫æNG VI·ªÜT")
    print("Version: 1.0.0 - Phase 2")
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "test":
            test_phase_1()
        elif sys.argv[1] == "demo":
            interactive_demo()
        elif sys.argv[1] == "ui":
            run_ui()
        else:
            print("Usage: python main.py [test|demo|ui]")
            print("  test - Ch·∫°y tests c∆° b·∫£n")
            print("  demo - Demo t∆∞∆°ng t√°c d√≤ng l·ªánh")
            print("  ui   - Ch·∫°y giao di·ªán ƒë·ªì h·ªça")
    else:
        # M·∫∑c ƒë·ªãnh ch·∫°y UI
        print("\nüéØ Ch·ªçn ch·∫ø ƒë·ªô:")
        print("1. Test c∆° b·∫£n")
        print("2. Demo d√≤ng l·ªánh")
        print("3. Giao di·ªán ƒë·ªì h·ªça (khuy·∫øn ngh·ªã)")
        
        try:
            choice = input("\nCh·ªçn (1/2/3): ").strip()
            if choice == "1":
                test_phase_1()
            elif choice == "2":
                interactive_demo()
            elif choice == "3" or choice == "":
                run_ui()
            else:
                print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Ch·∫°y giao di·ªán ƒë·ªì h·ªça...")
                run_ui()
        except KeyboardInterrupt:
            print("\nT·∫°m bi·ªát! üëã")


if __name__ == "__main__":
    main() 